/**
 * Checks if a keyboard event is triggered by a valid key without any specified invalid keys or modifier keys.
 *
 * @param e The keyboard event to check.
 * @param invalidKeys An optional array of additional keys that should be considered invalid.
 * @returns True if the event is triggered by a valid key without any specified invalid keys or modifier keys, false otherwise.
 */
export declare const isValidKey: (e: React.KeyboardEvent, invalidKeys?: string[]) => boolean;
/**
 * Checks that the pressed key's `keyCode` is one of printable characters
 * @param {number} keyCode `keyCode` field from `KeyboardEvent` interface
 * @returns {boolean} Returns `true` if `keyCode` is one of printable characters
 */
export declare const isKeyCodeAlphaNumeric: (keyCode: number) => boolean;
/**
 * Checks that the pressed key's `keyCode` is one of numeric keys
 *
 * @param {number} keyCode `keyCode` field from `KeyboardEvent` interface
 * @returns {boolean} Returns `true` if `keyCode` is one of numeric keys
 *
 * @see https://reactgrid.com/docs/3.1/7-api/2-functions/
 */
export declare const inNumericKey: (keyCode: number) => boolean;
/**
 *
 * @param keyCode `keyCode` field from `KeyboardEvent` interface
 * @returns Returns `true` if `keyCode` is one of number separator keys
 */
export declare const isNumberSeparator: (keyCode: number) => boolean;
/**
 * Checks that the pressed key's `keyCode` is one of numpad keys
 *
 * @param {number} keyCode `keyCode` field from `KeyboardEvent` interface
 * @returns {boolean} Returns `true` if `keyCode` is one of numpad keys
 *
 * @see https://reactgrid.com/docs/3.1/7-api/2-functions/
 */
export declare const isNumpadNumericKey: (keyCode: number) => boolean;
/**
 * Checks that the pressed key's `keyCode` is one of navigation keys
 *
 * @param {number} keyCode `keyCode` field from `KeyboardEvent` interface
 * @returns {boolean} Returns `true` if `keyCode` is one of navigation keys
 */
export declare const isNavigationKey: (keyCode: number) => boolean;
